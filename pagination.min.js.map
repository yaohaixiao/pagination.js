{"version":3,"file":"pagination.min.js","sources":["utils/lang/toString.js","utils/types/isFunction.js","utils/types/isObject.js","utils/types/isArray.js","utils/lang/cloneDeep.js","utils/lang/hasOwn.js","utils/types/isBoolean.js","utils/types/isString.js","utils/types/isNumber.js","utils/types/isHTMLElement.js","utils/dom/hasClass.js","utils/dom/addClass.js","utils/string/trim.js","utils/dom/removeClass.js","utils/dom/getEl.js","utils/dom/enum.js","utils/types/isDOM.js","utils/types/isHTMLCollection.js","utils/types/isFragment.js","utils/types/isText.js","utils/dom/setAttributes.js","utils/dom/setAttribute.js","utils/dom/text.js","utils/dom/createElement.js","utils/dom/tags.js","utils/types/isHTML.js","utils/string/stripScripts.js","utils/dom/html.js","utils/observer/observers.js","utils/lang/guid.js","utils/observer/unsubscribe.js","utils/observer/has.js","utils/dom/matches.js","utils/dom/getParentOrHost.js","utils/event/enum.js","utils/event/_off.js","utils/event/_delete.js","utils/event/purge.js","utils/event/getListeners.js","utils/event/off.js","utils/event/on.js","utils/event/getTarget.js","utils/dom/resolveTextNode.js","utils/dom/closest.js","utils/event/stop.js","pagination.js","utils/lang/extend.js","utils/observer/publish.js","utils/observer/subscribe.js","utils/dom/getAttribute.js"],"sourcesContent":["/**\r\n * Object 对象原型上的 toString 方法\r\n * ========================================================================\r\n * @method toString\r\n * @param {*} val\r\n * @returns {string}\r\n */\r\nconst toString = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default toString\r\n","import toString from '@/utils/lang/toString'\r\n\r\n/**\r\n * 判断数据是否为函数类型\r\n * ==========================================================\r\n * @method isFunction\r\n * @param {Function} fn - 需要判断的数据\r\n * @return {Boolean} 返回检测结果：是函数类型，返回 true，否则返回false\r\n */\r\nconst isFunction = (fn) => {\r\n  return fn && toString(fn) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","import toString from '@/utils/lang/toString'\r\nimport isFunction from '@/utils/types/isFunction'\r\n\r\n/**\r\n * 检测数据是否为 Object 类型\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isObject = (o) => {\r\n  return (\r\n    (toString(o) === '[object Object]' ||\r\n      typeof o === 'object' ||\r\n      isFunction(o)) &&\r\n    o !== null\r\n  )\r\n}\r\n\r\nexport default isObject\r\n","import toString from '@/utils/lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","import isObject from '@/utils/types/isObject'\r\nimport isArray from '@/utils/types/isArray'\r\n\r\n/**\r\n * 深拷贝对象函数\r\n * ========================================================================\r\n * @methods cloneDeep\r\n * @param {Object} obj - 深拷贝的对象\r\n * @returns {Array|Object|*}\r\n *\r\n * @example\r\n * const arr = cloneDeep([2,3,4,6])\r\n * => [2,3,4,6]\r\n */\r\nconst cloneDeep = (obj) => {\r\n  let clone = {}\r\n\r\n  if (obj === null) {\r\n    return null\r\n  }\r\n\r\n  if (isArray(obj)) {\r\n    clone = Array.from(obj)\r\n  } else {\r\n    clone = Object.assign({}, obj)\r\n    Object.keys(clone).forEach((key) => {\r\n      return (clone[key] = isObject(obj[key]) ? cloneDeep(obj[key]) : obj[key])\r\n    })\r\n  }\r\n\r\n  return clone\r\n}\r\n\r\nexport default cloneDeep\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","const isBoolean = (val) => {\r\n  return typeof val === 'boolean'\r\n}\r\n\r\nexport default isBoolean\r\n","/**\r\n * 检测数据是否为 String 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} str\r\n * @returns {boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * 检测数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isNumber = (o) => {\r\n  return typeof o === 'number'\r\n}\r\n\r\nexport default isNumber\r\n","import isObject from '@/utils/types/isObject'\r\n\r\n/**\r\n * 检测数据是否为 HTMLElement DOM 节点\r\n * ========================================================================\r\n * @method isHTMLElement\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isHTMLElement = (o) => {\r\n  return !!(isObject(o) && o.nodeName && o.tagName && o.nodeType === 1)\r\n}\r\n\r\nexport default isHTMLElement\r\n","import isHTMLElement from '@/utils/types/isHTMLElement'\r\n\r\n/**\r\n * 检测 DOM 节点是否包含名为 className 的样式\r\n * ========================================================================\r\n * @method hasClass\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/contains\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst hasClass = (el, className) => {\r\n  let pattern\r\n  let allClass\r\n  let classList\r\n\r\n  if (!isHTMLElement(el) || !className) {\r\n    return false\r\n  }\r\n\r\n  pattern = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\r\n  allClass = el.className\r\n\r\n  if (!allClass) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.contains) {\r\n    return el.classList.contains(className)\r\n  }\r\n\r\n  return !!pattern.exec(allClass)\r\n}\r\n\r\nexport default hasClass\r\n","import isHTMLElement from '@/utils/types/isHTMLElement'\r\nimport hasClass from '@/utils/dom/hasClass'\r\n\r\n/**\r\n * 给 DOM 节点添加名为 className 的样式\r\n * ========================================================================\r\n * @method addClass\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n */\r\nconst addClass = (el, className) => {\r\n  let classList\r\n  let allClass\r\n\r\n  if (!isHTMLElement(el) || hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.add) {\r\n    classList.add(className)\r\n  } else {\r\n    allClass = el.className\r\n    allClass += allClass.length > 0 ? ' ' + className : className\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default addClass\r\n","import isString from '@/utils/types/isString'\r\nimport isFunction from '@/utils/types/isFunction'\r\n\r\n/**\r\n * 清楚字符串起始位置所有的空格\r\n * ========================================================================\r\n * @method trim\r\n * @param {string} str\r\n * @returns {string|Boolean}\r\n */\r\nconst trim = (str) => {\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  if (isFunction(str.trim)) {\r\n    return str.trim()\r\n  } else {\r\n    return str.replace(/(^\\s+)|(\\s+$)/g, '')\r\n  }\r\n}\r\n\r\nexport default trim\r\n","import trim from '@/utils/string/trim'\r\nimport isHTMLElement from '@/utils/types/isHTMLElement'\r\nimport hasClass from '@/utils/dom/hasClass'\r\n\r\n/**\r\n * 移除 DOM 节点的 className 样式\r\n * ========================================================================\r\n * @method removeClass\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n */\r\nconst removeClass = (el, className) => {\r\n  let allClass\r\n  let classList\r\n\r\n  if (!isHTMLElement(el) || !className) {\r\n    return false\r\n  }\r\n\r\n  allClass = el.className\r\n\r\n  if (!allClass || !hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.remove) {\r\n    classList.remove(className)\r\n  } else {\r\n    allClass = trim(allClass.replace(className, ''))\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default removeClass\r\n","import isBoolean from '@/utils/types/isBoolean'\r\nimport isHTMLElement from '@/utils/types/isHTMLElement'\r\n\r\n/**\r\n * 返回与指定的选择器组匹配的文档中的 DOM 元素或者 DOM 元素列表。\r\n * ========================================================================\r\n * @method  getEl\r\n * @param {String} selector\r\n * @param {HTMLElement|Boolean} [el]\r\n * @param {Boolean} [multiple]\r\n * @return {NodeListOf<*>|HTMLElement|*}\r\n */\r\nconst getEl = (selector, el, multiple = false) => {\r\n  const $el = isHTMLElement(el) ? el : document\r\n  let isMultiple = multiple\r\n\r\n  if (isBoolean(el)) {\r\n    isMultiple = el\r\n  }\r\n\r\n  if (isMultiple) {\r\n    return $el.querySelectorAll(selector)\r\n  }\r\n\r\n  return $el.querySelector(selector)\r\n}\r\n\r\nexport default getEl\r\n","export const FROM_ELEMENT_TAGS = [\r\n  'input',\r\n  'textarea',\r\n  'checkbox',\r\n  'radio',\r\n  'select',\r\n  'datalist',\r\n  'option',\r\n  'output'\r\n]\r\n","import isObject from '@/utils/types/isObject'\r\nimport isHTMLElement from '@/utils/types/isHTMLElement'\r\nimport isHTMLCollection from '@/utils/types/isHTMLCollection'\r\nimport isFragment from '@/utils/types/isFragment'\r\nimport isText from '@/utils/types/isText'\r\n\r\nconst isDOM = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (isHTMLElement(el) || isHTMLCollection(el) || isFragment(el) || isText(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import toString from '@/utils/lang/toString'\r\nimport isObject from '@/utils/types/isObject'\r\n\r\n/**\r\n * @method isHTMLCollection\r\n * @param {Object|NodeList|HTMLCollection} el\r\n * @return {Boolean}\r\n */\r\nconst isHTMLCollection = (el) => {\r\n  return !!(isObject(el) && toString(el) === '[object NodeList]')\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import toString from '@/utils/lang/toString'\r\nimport isObject from '@/utils/types/isObject'\r\n\r\nconst isFragment = (fragment) => {\r\n  return !!(\r\n    isObject(fragment) && toString(fragment) === '[object DocumentFragment]'\r\n  )\r\n}\r\n\r\nexport default isFragment\r\n","import toString from '@/utils/lang/toString'\r\nimport isObject from '@/utils/types/isObject'\r\n\r\nconst isText = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (toString(el) === '[object Text]' || (el.tagName && el.nodeType === 3))\r\n  )\r\n}\r\n\r\nexport default isText\r\n","import hasOwn from '@/utils/lang/hasOwn'\r\nimport isObject from '@/utils/types/isObject'\r\nimport setAttribute from '@/utils/dom/setAttribute'\r\n\r\n/**\r\n * 给 DOM 元素一次设置多个 DOM 属性/值\r\n * ========================================================================\r\n * @method setAttributes\r\n * @param {HTMLElement} el\r\n * @param {Object} attrs\r\n * @return {boolean}\r\n */\r\nconst setAttributes = (el, attrs) => {\r\n  if (!el || !isObject(attrs)) {\r\n    return false\r\n  }\r\n\r\n  Object.keys(attrs).forEach((attr) => {\r\n    const value = attrs[attr]\r\n\r\n    /* istanbul ignore else */\r\n    if (hasOwn(attrs, attr)) {\r\n      setAttribute(el, attr, value)\r\n    }\r\n  })\r\n}\r\n\r\nexport default setAttributes\r\n","import isHTMLElement from '@/utils/types/isHTMLElement'\r\nimport { FROM_ELEMENT_TAGS } from '@/utils/dom/enum'\r\n\r\n/**\r\n * 给 DOM 节点设置属性/值\r\n * ========================================================================\r\n * @method setAttribute\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} attr - 属性名称\r\n * @param {String|Number|Boolean} value - 属性值\r\n */\r\nconst setAttribute = (el, attr, value) => {\r\n  let tagName\r\n\r\n  if (!isHTMLElement(el)) {\r\n    return false\r\n  }\r\n\r\n  tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'className':\r\n      el.className = value\r\n      break\r\n    case 'htmlFor':\r\n      el.setAttribute('for', value)\r\n      break\r\n    case 'style':\r\n      el.style.cssText = value\r\n      break\r\n    case 'value':\r\n      if (FROM_ELEMENT_TAGS.indexOf(tagName) > -1) {\r\n        el.value = value\r\n      } else {\r\n        el.setAttribute(attr, value)\r\n      }\r\n      break\r\n    case 'innerText':\r\n      el.innerText = value\r\n      break\r\n    case 'innerHTML':\r\n      el.innerHTML = value\r\n      break\r\n    default:\r\n      el.setAttribute(attr, value)\r\n      break\r\n  }\r\n}\r\n\r\nexport default setAttribute\r\n","import isString from '@/utils/types/isString'\r\nimport isHTMLElement from '@/utils/types/isHTMLElement'\r\n\r\n/**\r\n * 获取或者设置 DOM 元素的 innerText 属性值，或者通过字符串，创建 TextNode 元素\r\n * ========================================================================\r\n * @method text\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent\r\n * @param {HTMLElement|String} el\r\n * @param {String} [str]\r\n * @return {Text|*}\r\n */\r\nconst text = (el, str) => {\r\n  if (!el || (!isString(el) && !isHTMLElement(el))) {\r\n    return false\r\n  }\r\n\r\n  if (isString(el)) {\r\n    return document.createTextNode(el)\r\n  } else if (isString(str)) {\r\n    el.textContent = str\r\n  } else {\r\n    return el.textContent\r\n  }\r\n}\r\n\r\nexport default text\r\n","import isObject from '@/utils/types/isObject'\r\nimport isString from '@/utils/types/isString'\r\nimport isArray from '@/utils/types/isArray'\r\nimport isDOM from '@/utils/types/isDOM'\r\nimport setAttributes from '@/utils/dom/setAttributes'\r\nimport text from '@/utils/dom/text'\r\n\r\n/**\r\n * 创建 DOM 节点，并添加属性和子节点\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} tagName - 标签名称\r\n * @param {Object|Array|HTMLElement|DocumentFragment|String} [attrs] - 属性对象或者子节点\r\n * @param {Array|HTMLElement|DocumentFragment|String} [children] - 子节点数组\r\n * @returns {HTMLElement|null}\r\n */\r\nconst createElement = (tagName, attrs, children) => {\r\n  const $fragment = document.createDocumentFragment()\r\n\r\n  if (!tagName) {\r\n    return null\r\n  }\r\n\r\n  const $el = document.createElement(tagName)\r\n  const isValidChild = (child) => {\r\n    return isDOM(child) || isString(child)\r\n  }\r\n  const append = (child) => {\r\n    let $child\r\n\r\n    if (!isValidChild(child)) {\r\n      return false\r\n    }\r\n\r\n    if (isDOM(child)) {\r\n      $child = child\r\n    } else {\r\n      $child = text(child)\r\n    }\r\n\r\n    $fragment.appendChild($child)\r\n  }\r\n\r\n  if (isString(attrs)) {\r\n    append(text(attrs))\r\n  } else if (isDOM(attrs)) {\r\n    append(attrs)\r\n  } else if (isArray(attrs) && attrs.every((attr) => isValidChild(attr))) {\r\n    attrs.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else if (isObject(attrs) && !isDOM(attrs)) {\r\n    setAttributes($el, attrs)\r\n  }\r\n\r\n  if (isArray(children)) {\r\n    children.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else {\r\n    append(children)\r\n  }\r\n\r\n  $el.appendChild($fragment)\r\n\r\n  return $el\r\n}\r\n\r\nexport default createElement\r\n","// HTML 合法的标签\r\nconst TAGS = [\r\n  'a',\r\n  'abbr',\r\n  'address',\r\n  'area',\r\n  'article',\r\n  'aside',\r\n  'audio',\r\n  'b',\r\n  'base',\r\n  'bdi',\r\n  'bdo',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'cite',\r\n  'code',\r\n  'col',\r\n  'colgroup',\r\n  'data',\r\n  'datalist',\r\n  'dd',\r\n  'del',\r\n  'details',\r\n  'dfn',\r\n  'dialog',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'em',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hgroup',\r\n  'hr',\r\n  'html',\r\n  'i',\r\n  'iframe',\r\n  'img',\r\n  'input',\r\n  'ins',\r\n  'kbd',\r\n  'label',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'map',\r\n  'mark',\r\n  'math',\r\n  'menu',\r\n  'menuitem',\r\n  'meta',\r\n  'meter',\r\n  'nav',\r\n  'noscript',\r\n  'object',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'output',\r\n  'p',\r\n  'param',\r\n  'picture',\r\n  'pre',\r\n  'progress',\r\n  'q',\r\n  'rb',\r\n  'rp',\r\n  'rt',\r\n  'rtc',\r\n  'ruby',\r\n  's',\r\n  'samp',\r\n  'script',\r\n  'search',\r\n  'section',\r\n  'select',\r\n  'slot',\r\n  'small',\r\n  'source',\r\n  'span',\r\n  'strong',\r\n  'style',\r\n  'sub',\r\n  'summary',\r\n  'sup',\r\n  'svg',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'template',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'time',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'u',\r\n  'ul',\r\n  'var',\r\n  'video',\r\n  'wbr'\r\n]\r\n\r\nexport default TAGS\r\n","import isString from '@/utils/types/isString'\r\nimport trim from '@/utils/string/trim'\r\nimport TAGS from '@/utils/dom/tags'\r\n\r\n/**\r\n * 检测测试数据是否为合法的 HTML 代码\r\n * ========================================================================\r\n * @method isHTML\r\n * @category Lang\r\n * @see https://github.com/sindresorhus/html-tags\r\n * @see https://github.com/sindresorhus/is-html\r\n * @param {String} str - 要检测的数据\r\n * @returns {Boolean} 'val' 为合法的 HTML 代码，返回 true，否则返回 false\r\n */\r\nconst isHTML = (str) => {\r\n  let html\r\n  let basic\r\n  let full\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  // 为了提高性能，我们将其限制在合理的长度内。\r\n  html = trim(str).slice(0, 1000)\r\n  basic = /\\s*<!doctype html>|<html\\b[^>]*>|<body\\b[^>]*>|<x-[^>]+>/i\r\n  full = new RegExp(TAGS.map((tag) => `<${tag}\\\\b[^>]*>`).join('|'), 'i')\r\n\r\n  return basic.test(html) || full.test(html)\r\n}\r\n\r\nexport default isHTML\r\n","/**\r\n * 移除字符串中的 JavaScript 代码\r\n * ========================================================================\r\n * @param {String} str\r\n * @returns {String}\r\n */\r\nconst stripScripts = (str) => {\r\n  return str.replace(/<script[^>]*>.*?<\\/script>/gi, '')\r\n}\r\n\r\nexport default stripScripts\r\n","import isHTML from '@/utils/types/isHTML'\r\nimport isString from '@/utils/types/isString'\r\nimport isHTMLElement from '@/utils/types/isHTMLElement'\r\nimport stripScripts from '@/utils/string/stripScripts'\r\nimport createElement from '@/utils/dom/createElement'\r\n\r\n/**\r\n * 获取或者设置 DOM 元素的 innerHTML 属性值，或者通过 HTML 字符串，创建 DOM 元素\r\n * ========================================================================\r\n * @method html\r\n * @param {HTMLElement|String} el\r\n * @param {String} [strHTML]\r\n * @return {DocumentFragment|null|*}\r\n */\r\nconst html = (el, strHTML) => {\r\n  const $fragment = document.createDocumentFragment()\r\n\r\n  if (!el || (!isHTML(el) && !isString(el) && !isHTMLElement(el))) {\r\n    return null\r\n  }\r\n\r\n  if (isHTML(el)) {\r\n    const template = createElement('div')\r\n    let children = []\r\n\r\n    template.innerHTML = stripScripts(el)\r\n    children = [...template.childNodes]\r\n    children.forEach((child) => {\r\n      $fragment.appendChild(child)\r\n    })\r\n\r\n    return $fragment\r\n  } else if (isString(strHTML)) {\r\n    el.innerHTML = stripScripts(strHTML)\r\n  } else {\r\n    return el.innerHTML\r\n  }\r\n}\r\n\r\nexport default html\r\n","/**\r\n * 存储订阅者（主题和处理器的）私有对象\r\n * ========================================================================\r\n * @type {{}}\r\n * @private\r\n */\r\nconst observers = {}\r\n\r\nexport default observers\r\n","/**\r\n * 生成唯一 id 字符串的函数\r\n * ==========================================================\r\n * @method guid\r\n * @param {String} [prefix] - 生成 id 的前缀字符串\r\n * @return {String} 返回一个表示唯一 id 的字符串\r\n */\r\nconst guid = (() => {\r\n  let id = 0\r\n\r\n  return (prefix = 'guid-') => {\r\n    id += 1\r\n\r\n    return `${prefix + id}`\r\n  }\r\n})()\r\n\r\nexport default guid\r\n","import observers from '@/utils/observer/observers'\r\nimport has from '@/utils/observer/has'\r\n\r\n/**\r\n * 取消订阅主题：如果仅传递 topic 则删除整个 topic 主题，如果还传递了\r\n * token，则仅删除 topic 主题下的相应 token 值的单个订阅信息\r\n * ==========================================================\r\n * @method unsubscribe\r\n * @param {String} topic - （必须）订阅的主题 topic 名称\r\n * @param {String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\r\n */\r\nconst unsubscribe = (topic, token) => {\r\n  let observer\r\n\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  observer = observers[topic]\r\n\r\n  // 传递了 token\r\n  if (token) {\r\n    // 则仅删除 topic 主题下的相应 token 值的单个订阅信息\r\n    observers[topic] = observer.filter(\r\n      (subscription) => subscription.token !== token\r\n    )\r\n  } else {\r\n    // 删除整个 topic 主题的订阅信息\r\n    delete observers[topic]\r\n  }\r\n}\r\n\r\nexport default unsubscribe\r\n","import observers from '@/utils/observer/observers'\r\n\r\n/**\r\n * 判断是否存在包含 topic 主题的订阅者信息\r\n * ==========================================================\r\n * @method has\r\n * @param {String} topic - （必须）主题名称\r\n * @returns {Boolean}\r\n */\r\nconst has = (topic) => {\r\n  return !!observers[topic]\r\n}\r\n\r\nexport default has\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from '@/utils/event/enum'\r\nimport _delete from '@/utils/event/_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from '@/utils/types/isString'\r\nimport isHTMLElement from '@/utils/types/isHTMLElement'\r\nimport getListeners from '@/utils/event/getListeners'\r\nimport _off from '@/utils/event/_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purge\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purge = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isHTMLElement($child)) {\r\n        purge($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purge\r\n","import isString from '@/utils/types/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","import isFunction from '@/utils/types/isFunction'\r\nimport purge from '@/utils/event/purge'\r\nimport _off from '@/utils/event/_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement|Object} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    purge(el, type)\r\n    return false\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","import closest from '@/utils/dom/closest'\r\nimport off from '@/utils/event/off'\r\nimport getTarget from '@/utils/event/getTarget'\r\nimport { CAPTURE_EVENTS } from '@/utils/event/enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （可选） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el) {\r\n    return false\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import resolveTextNode from '@/utils/dom/resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import matches from '@/utils/dom/matches'\r\nimport getParentOrHost from '@/utils/dom/getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector.startsWith('>')\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stop\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stop = function (evt) {\r\n  evt.stopPropagation()\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default stop\r\n","import cloneDeep from '@/utils/lang/cloneDeep'\r\nimport hasOwn from '@/utils/lang/hasOwn'\r\nimport extend from '@/utils/lang/extend'\r\nimport isBoolean from '@/utils/types/isBoolean'\r\nimport isString from '@/utils/types/isString'\r\nimport isNumber from '@/utils/types/isNumber'\r\nimport isObject from '@/utils/types/isObject'\r\nimport hasClass from '@/utils/dom/hasClass'\r\nimport addClass from '@/utils/dom/addClass'\r\nimport removeClass from '@/utils/dom/removeClass'\r\nimport getEl from '@/utils/dom/getEl'\r\nimport getAttribute from '@/utils/dom/getAttribute'\r\nimport createElement from '@/utils/dom/createElement'\r\nimport html from '@/utils/dom/html'\r\nimport text from '@/utils/dom/text'\r\nimport publish from '@/utils/observer/publish'\r\nimport subscribe from '@/utils/observer/subscribe'\r\nimport unsubscribe from '@/utils/observer/unsubscribe'\r\nimport on from '@/utils/event/on'\r\nimport off from '@/utils/event/off'\r\nimport stop from '@/utils/event/stop'\r\n\r\nimport '@/theme/pagination.less'\r\n\r\nclass Pagination {\r\n  /**\r\n   * 分页组件的构造函数\r\n   * ========================================================================\r\n   * @constructor\r\n   * @param {Object} [options] - 可选，分页组件的初始化配置信息\r\n   * @param {String|HTMLElement} options.parent - 必须，显分页导航的父节点或者节点选择器\r\n   * @param {Number} options.total - 必须，数据总数量\r\n   * @param {Number} [options.size=20] - 可选，每页显示的数量，默认值：20\r\n   * @param {Number} [options.page=1] - 可选，当前页面，默认值：1\r\n   * @param {Number} [options.limit=7] - 可选，页面导航数字按钮的个数，默认值：7\r\n   * @param {String} [options.theme='default'] - 可选，主题：default（默认值）、plain 和 bordered\r\n   * @param {String} [options.align='justify'] - 可选，导航的对齐方式：justify（默认值）、left 和 right\r\n   * @param {Array} [options.layout=['prev','pager','next']] - 可选，导航显示的组件，默认值：['prev','pager','next']\r\n   * @param {String} [options.prevText=''] - 可选，上一页按钮的显示文本。如果配置文字，就用文字按钮显示，否认使用图标按钮\r\n   * @param {String} [options.nextText=''] - 可选，下一页按钮的显示文本。如果配置文字，就用文字按钮显示，否认使用图标按钮\r\n   * @param {Boolean} [options.prevIcon=true] - 可选，是否用图标按钮显示上一页按钮，默认值：true\r\n   * @param {Boolean} [options.nextIcon=true] - 可选，是否用图标按钮显示下一页按钮，默认值：true\r\n   * @param {Boolean} [options.disabled=false] - 可选，分页导航是否禁用，默认值：false\r\n   * @param {String} [options.customClass=''] - 可选，用于扩展的自定义导航样式，默认值：''\r\n   * @returns {Pagination}\r\n   */\r\n  constructor(options) {\r\n    this.attrs = {}\r\n    this.$el = null\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 分页组件的默认初始化配置信息和属性的方法\r\n   * ========================================================================\r\n   * @returns {Pagination}\r\n   * @private\r\n   */\r\n  _default() {\r\n    const options = Pagination.DEFAULTS\r\n\r\n    this.attr(options)\r\n    this.$el = null\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 分页组件的初始化方法，用来初始化配置信息，渲染界面和绑定事件处理器\r\n   * ========================================================================\r\n   * @method initialize\r\n   * @param {Object} options - 必须，分页组件的初始化配置信息\r\n   * @param {String|HTMLElement} options.parent - 必须，显分页导航的父节点或者节点选择器\r\n   * @param {Number} options.total - 必须，数据总数量\r\n   * @param {Number} [options.size=20] - 可选，每页显示的数量，默认值：20\r\n   * @param {Number} [options.page=1] - 可选，当前页面，默认值：1\r\n   * @param {Number} [options.limit=7] - 可选，页面导航数字按钮的个数，默认值：7\r\n   * @param {String} [options.theme='default'] - 可选，主题：default（默认值）、plain 和 bordered\r\n   * @param {String} [options.align='justify'] - 可选，导航的对齐方式：justify（默认值）、left 和 right\r\n   * @param {Array} [options.layout=['prev','pager','next']] - 可选，导航显示的组件，默认值：['prev','pager','next']\r\n   * @param {String} [options.prevText=''] - 可选，上一页按钮的显示文本。如果配置文字，就用文字按钮显示，否认使用图标按钮\r\n   * @param {String} [options.nextText=''] - 可选，下一页按钮的显示文本。如果配置文字，就用文字按钮显示，否认使用图标按钮\r\n   * @param {Boolean} [options.prevIcon=true] - 可选，是否用图标按钮显示上一页按钮，默认值：true\r\n   * @param {Boolean} [options.nextIcon=true] - 可选，是否用图标按钮显示下一页按钮，默认值：true\r\n   * @param {Boolean} [options.disabled=false] - 可选，分页导航是否禁用，默认值：false\r\n   * @param {String} [options.customClass=''] - 可选，用于扩展的自定义导航样式，默认值：''\r\n   * @returns {Pagination}\r\n   */\r\n  initialize(options) {\r\n    this._default().attr(options)\r\n\r\n    // 添加 mounted 事件\r\n    this.$emit('created')\r\n\r\n    this.render().addListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取或者设置分页组件的配置信息：\r\n   * 1. 不传递任何参数，用以获取所有配置信息；\r\n   * 2. 仅传递 prop 参数：\r\n   *    1. prop 参数为字符串类型，用来获取某个配置信息的值；\r\n   *    2. prop 参数为对象类型，用来设置多个配置信息；\r\n   * 3. 传递 prop 和 value 参数，用来设置某个配置信息；\r\n   * ========================================================================\r\n   * @method attr\r\n   * @param {String|Object} [prop] - 可选，参数为字符串类型，希望获取的获取某个配置信息的名称；\r\n   *                                 参数为对象类型，用来设置多个配置信息；\r\n   * @param {String|Number|Boolean|Array} [value] - 可选，用来设置 prop 配置参数信息的值；\r\n   * @returns {*|{}|Pagination}\r\n   */\r\n  attr(prop, value) {\r\n    const attrs = this.attrs\r\n\r\n    if (isString(prop)) {\r\n      // 只能扩展 attrs 中已有的属性\r\n      if (value && hasOwn(attrs, prop)) {\r\n        // 更新单个配置信息\r\n        attrs[prop] = value\r\n        return this\r\n      }\r\n\r\n      // 只传递 prop 参数，则返回对应的属性值\r\n      return attrs[prop]\r\n    } else if (isObject(prop)) {\r\n      // 批量更新配置信息\r\n      extend(attrs, prop)\r\n\r\n      return this\r\n    } else if (arguments.length === 0) {\r\n      // 不传递参数，直接返回整个\r\n      return attrs\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 用来设置 total 配置参数，或者获取 total 配置参数的值：\r\n   * 1. 传递 total 参数，用来设置 total 配置信息的值；\r\n   * 2. 不传递则用以获取 total 配置信息的值；\r\n   * ========================================================================\r\n   * @method total\r\n   * @param {Number} [total] - 可选，传递 total 参数，用来设置 total 配置信息的值；\r\n   *                           不传递则用以获取 total 配置信息的值；\r\n   * @returns {Number|Pagination}\r\n   */\r\n  total(total) {\r\n    if (isNumber(total) && total) {\r\n      this.attr('total', total)\r\n      this.refresh()\r\n    } else {\r\n      return this.attr('total')\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 用来设置 page 配置参数，或者获取 page 配置参数的值：\r\n   * 1. 传递 page 参数，用来设置 page 配置信息的值；\r\n   * 2. 不传递则用以获取 page 配置信息的值；\r\n   * ========================================================================\r\n   * @method page\r\n   * @param {Number} [page] - 可选，传递 page 参数，用来设置 page 配置信息的值；\r\n   *                          不传递则用以获取 page 配置信息的值；\r\n   * @returns {*|{}|Pagination}\r\n   */\r\n  page(page) {\r\n    const total = this.total()\r\n\r\n    if (isNumber(page) && page && page <= total) {\r\n      this.attr('page', page)\r\n      this.refresh()\r\n    } else {\r\n      return this.attr('page')\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 用来设置 size 配置参数，或者获取 size 配置参数的值：\r\n   * 1. 传递 size 参数，用来设置 size 配置信息的值；\r\n   * 2. 不传递则用以获取 size 配置信息的值；\r\n   * ========================================================================\r\n   * @method size\r\n   * @param {Number} [size] - 可选，传递 size 参数，用来设置 size 配置信息的值；\r\n   *                          不传递则用以获取 size 配置信息的值；\r\n   * @returns {Number|Pagination}\r\n   */\r\n  size(size) {\r\n    const total = this.total()\r\n\r\n    if (isNumber(size) && size && size <= total) {\r\n      this.attr('size', size)\r\n      this.refresh()\r\n    } else {\r\n      return this.attr('size')\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 用来设置 limit 配置参数，或者获取 limit 配置参数的值：\r\n   * 1. 传递 limit 参数，用来设置 limit 配置信息的值；\r\n   * 2. 不传递则用以获取 limit 配置信息的值；\r\n   * ========================================================================\r\n   * @method limit\r\n   * @param {Number} [limit] - 可选，传递 limit 参数，用来设置 limit 配置信息的值；\r\n   *                           不传递则用以获取 limit 配置信息的值；\r\n   * @returns {Number|Pagination}\r\n   */\r\n  limit(limit) {\r\n    if (isNumber(limit) && limit && limit >= 5 && limit <= 13) {\r\n      this.attr('limit', limit)\r\n      this.refresh()\r\n    } else {\r\n      return this.attr('limit')\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 用来设置 theme 配置参数，或者获取 theme 配置参数的值：\r\n   * 1. 传递 theme 参数，用来设置 theme 配置信息的值；\r\n   * 2. 不传递则用以获取 theme 配置信息的值；\r\n   * ========================================================================\r\n   * @method theme\r\n   * @param {String} [theme] - 可选，传递 theme 参数，用来设置 theme 配置信息的值；\r\n   *                           不传递则用以获取 theme 配置信息的值；\r\n   * @returns {Number|Pagination}\r\n   */\r\n  theme(theme) {\r\n    const THEMES = ['default', 'plain', 'bordered']\r\n\r\n    if (isString(theme) && theme && THEMES.includes(theme)) {\r\n      this.attr('theme', theme)\r\n      this.refresh()\r\n    } else {\r\n      return this.attr('theme')\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 用来设置 align 配置参数，或者获取 align 配置参数的值：\r\n   * 1. 传递 align 参数，用来设置 align 配置信息的值；\r\n   * 2. 不传递则用以获取 align 配置信息的值；\r\n   * ========================================================================\r\n   * @method align\r\n   * @param {String} [align] - 可选，传递 align 参数，用来设置 align 配置信息的值；\r\n   *                           不传递则用以获取 align 配置信息的值；\r\n   * @returns {Number|Pagination}\r\n   */\r\n  align(align) {\r\n    const ALIGNS = ['default', 'plain', 'bordered']\r\n\r\n    if (isString(align) && align && ALIGNS.includes(align)) {\r\n      this.attr('align', align)\r\n      this.refresh()\r\n    } else {\r\n      return this.attr('align')\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 通过配置参数 total 和 size 的值，计算一共有多少页\r\n   * ========================================================================\r\n   * @method pages\r\n   * @returns {Number}\r\n   */\r\n  pages() {\r\n    const total = this.attr('total')\r\n    const size = this.attr('size')\r\n\r\n    return Math.ceil(total / size)\r\n  }\r\n\r\n  /**\r\n   * 用来设置 disabled 配置参数，或者获取 disabled 配置参数的值：\r\n   * 1. 传递 disabled 参数，用来设置 disabled 配置信息的值；\r\n   * 2. 不传递则用以获取 disabled 配置信息的值；\r\n   * ========================================================================\r\n   * @method disabled\r\n   * @param {Boolean} [disabled] - 可选，传递 disabled 参数，用来设置 disabled 配置信息的值；\r\n   *                               不传递则用以获取 disabled 配置信息的值；\r\n   * @returns {Boolean|Pagination}\r\n   */\r\n  disabled(disabled) {\r\n    if (isBoolean(disabled)) {\r\n      this.attr('disabled', disabled)\r\n      this.refresh()\r\n    } else {\r\n      return this.attr('disabled')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 通过配置参数 pages 和当前页面 page 的值，以及 limit 的值，计算当前数值按钮的显示范围\r\n   * ========================================================================\r\n   * @method range\r\n   * @returns {Array}\r\n   */\r\n  range() {\r\n    const pages = this.pages()\r\n    const page = this.page()\r\n    const limit = this.limit()\r\n    const isQuickNextVisible = this.isQuickNextVisible()\r\n    const range = []\r\n    let i = 1\r\n    let len = 0\r\n\r\n    if (limit >= pages) {\r\n      if (pages > 1) {\r\n        i = 2\r\n        len = pages\r\n      }\r\n    } else if (this.isQuickPrevVisible()) {\r\n      i = page - (limit - 3) / 2\r\n\r\n      if (i >= pages - limit + 2) {\r\n        i = pages - limit + 2\r\n      }\r\n\r\n      if (isQuickNextVisible) {\r\n        len = page + (limit - 3) / 2\r\n      } else {\r\n        len = pages\r\n      }\r\n    } else {\r\n      if (isQuickNextVisible) {\r\n        i = page - (limit - 3) / 2\r\n\r\n        if (i <= 2) {\r\n          i = 2\r\n          len = limit - 1\r\n        } else {\r\n          len = page + (limit - 3) / 2\r\n        }\r\n      }\r\n    }\r\n\r\n    for (; i < len; i += 1) {\r\n      range.push(i)\r\n    }\r\n\r\n    return range\r\n  }\r\n\r\n  /**\r\n   * 用来获取显示分页导航的父节点\r\n   * ========================================================================\r\n   * @method parent\r\n   * @returns {HTMLElement}\r\n   */\r\n  parent() {\r\n    return getEl(this.attr('parent'))\r\n  }\r\n\r\n  /**\r\n   * 判断分页导航组件是否需要显示上一页按钮\r\n   * ========================================================================\r\n   * @method hasPrev\r\n   * @returns {Boolean}\r\n   */\r\n  hasPrev() {\r\n    const layout = this.attr('layout')\r\n    return layout.includes('prev')\r\n  }\r\n\r\n  /**\r\n   * 判断分页导航组件是否需要显示数字导航按钮\r\n   * ========================================================================\r\n   * @method hasPager\r\n   * @returns {Boolean}\r\n   */\r\n  hasPager() {\r\n    const layout = this.attr('layout')\r\n    return layout.includes('pager')\r\n  }\r\n\r\n  /**\r\n   * 判断分页导航组件是否需要显示下一页按钮\r\n   * ========================================================================\r\n   * @method hasNext\r\n   * @returns {Boolean}\r\n   */\r\n  hasNext() {\r\n    const layout = this.attr('layout')\r\n    return layout.includes('next')\r\n  }\r\n\r\n  /**\r\n   * 判断分页导航组件显示的数字导航按钮中是否需要显示快速到上一组按钮\r\n   * ========================================================================\r\n   * @method isQuickPrevVisible\r\n   * @returns {Boolean}\r\n   */\r\n  isQuickPrevVisible() {\r\n    const page = this.page()\r\n    const limit = this.limit()\r\n    const pages = this.pages()\r\n\r\n    return page - (limit - 3) / 2 > 2 && pages > limit\r\n  }\r\n\r\n  /**\r\n   * 判断分页导航组件显示的数字导航按钮中是否需要显示快速到下一组按钮\r\n   * ========================================================================\r\n   * @method hasPager\r\n   * @returns {Boolean}\r\n   */\r\n  isQuickNextVisible() {\r\n    const page = this.page()\r\n    const limit = this.limit()\r\n    const pages = this.pages()\r\n\r\n    return page + (limit - 3) / 2 < pages - 1 && pages > limit\r\n  }\r\n\r\n  /**\r\n   * 用来动态生成上一页按钮\r\n   * ========================================================================\r\n   * @method _createPrev\r\n   * @returns {HTMLElement}\r\n   * @private\r\n   */\r\n  _createPrev() {\r\n    const page = this.page()\r\n    const disabled = this.disabled()\r\n    const theme = this.attr('theme')\r\n    const prevText = this.attr('prevText')\r\n    const prevClassName = ['pagination__prev', `is-${theme}`]\r\n    const prevChildren = []\r\n\r\n    // 绘制上一页\r\n    if (isString(prevText) && prevText) {\r\n      // 创建文本内容\r\n      prevClassName.push('is-textual')\r\n      prevChildren.push(text(prevText))\r\n    } else {\r\n      if (isBoolean(prevText)) {\r\n        // 上一页图标\r\n        let iconPrev =\r\n          '<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"pagination__svg svg-prev\"><polygon fill-rule=\"evenodd\" points=\"9.414 12 16.707 19.293 15.293 20.707 6.586 12 15.293 3.293 16.707 4.707\"></polygon></svg>'\r\n\r\n        // 创建图标内容\r\n        prevChildren.push(html(`<i class=\"pagination__icon\">${iconPrev}</i>`))\r\n      }\r\n    }\r\n\r\n    // 动态创建完整的上一页按钮\r\n    const $prev = createElement(\r\n      'div',\r\n      {\r\n        className: prevClassName.join(' ')\r\n      },\r\n      prevChildren\r\n    )\r\n\r\n    // 设置禁用样式\r\n    if (page === 1 || disabled) {\r\n      addClass($prev, 'is-disabled')\r\n    }\r\n\r\n    return $prev\r\n  }\r\n\r\n  /**\r\n   * 用来动态生成下一页按钮\r\n   * ========================================================================\r\n   * @method _createNext\r\n   * @returns {HTMLElement}\r\n   * @private\r\n   */\r\n  _createNext() {\r\n    const page = this.page()\r\n    const total = this.total()\r\n    const disabled = this.disabled()\r\n    const theme = this.attr('theme')\r\n    const nextText = this.attr('nextText')\r\n    const nextClassName = ['pagination__next', `is-${theme}`]\r\n    const nextChildren = []\r\n\r\n    // 绘制下一页\r\n    if (isString(nextText) && nextText) {\r\n      // 创建文本内容\r\n      nextClassName.push('is-textual')\r\n      nextChildren.push(text(nextText))\r\n    } else {\r\n      if (isBoolean(nextText)) {\r\n        // 上一页图标\r\n        let iconNext =\r\n          '<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"pagination__svg svg-next\"><polygon fill-rule=\"evenodd\" points=\"14.586 12 7.293 4.707 8.707 3.293 17.414 12 8.707 20.707 7.293 19.293\"></polygon></svg>'\r\n\r\n        // 创建图标内容\r\n        nextChildren.push(html(`<i class=\"pagination__icon\">${iconNext}</i>`))\r\n      }\r\n    }\r\n\r\n    // 动态创建完整的下一页按钮\r\n    const $next = createElement(\r\n      'div',\r\n      {\r\n        className: nextClassName.join(' ')\r\n      },\r\n      nextChildren\r\n    )\r\n\r\n    // 设置禁用样式\r\n    if (page === total || disabled) {\r\n      addClass($next, 'is-disabled')\r\n    }\r\n\r\n    return $next\r\n  }\r\n\r\n  /**\r\n   * 用来动态生成单个数字导航按钮\r\n   * ========================================================================\r\n   * @method _createPager\r\n   * @param {Number} value - 必须，按钮要显示的页数数值\r\n   * @param {Number} current - 必须，当前按钮的页数数值\r\n   * @param {Object} [options] - 可选，当前按钮是否为快速到下一组或者上一组按钮\r\n   * @param {Boolean} [options.isQuickPrevVisible=false] - 可选，当前按钮是否为快速到上一组按钮，默认值：false\r\n   * @param {Boolean} [options.isQuickNextVisible=false] - 可选，当前按钮是否为快速到下一组按钮，默认值：false\r\n   * @returns {HTMLElement}\r\n   * @private\r\n   */\r\n  _createPager(value, current, options) {\r\n    const disabled = this.disabled()\r\n    const theme = this.attr('theme')\r\n    const isActive = current === value\r\n    const isQuickPrevVisible = options && options.isQuickPrevVisible\r\n    const isQuickNextVisible = options && options.isQuickNextVisible\r\n    const $children = []\r\n    let className = ['pagination__pager', `is-${theme}`]\r\n    let $child = null\r\n\r\n    // 设置当前页样式\r\n    if (isActive) {\r\n      className.push('is-active')\r\n    }\r\n\r\n    // 设置应用样式\r\n    if (disabled) {\r\n      className.push('is-disabled')\r\n    }\r\n\r\n    // 绘制快速到上下一组按钮\r\n    if (isQuickPrevVisible || isQuickNextVisible) {\r\n      // 省略号图标\r\n      let iconMore =\r\n        '<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"pagination__svg svg-more\"><path fill-rule=\"evenodd\" d=\"M5,14 C3.8954305,14 3,13.1045695 3,12 C3,10.8954305 3.8954305,10 5,10 C6.1045695,10 7,10.8954305 7,12 C7,13.1045695 6.1045695,14 5,14 Z M12,14 C10.8954305,14 10,13.1045695 10,12 C10,10.8954305 10.8954305,10 12,10 C13.1045695,10 14,10.8954305 14,12 C14,13.1045695 13.1045695,14 12,14 Z M19,14 C17.8954305,14 17,13.1045695 17,12 C17,10.8954305 17.8954305,10 19,10 C20.1045695,10 21,10.8954305 21,12 C21,13.1045695 20.1045695,14 19,14 Z\"></path></svg>'\r\n\r\n      // 上下一组快速按钮是没有边框的\r\n      className = className.filter((name) => name !== 'is-bordered')\r\n\r\n      if (isQuickPrevVisible) {\r\n        // 快速到上一组图标\r\n        let iconPrev =\r\n          '<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"pagination__svg svg-quick-prev\"><path fill-rule=\"evenodd\" d=\"M12.7071068,17.2928932 L11.2928932,18.7071068 L4.58578644,12 L11.2928932,5.29289322 L12.7071068,6.70710678 L7.41421356,12 L12.7071068,17.2928932 Z M12.4142136,12 L17.7071068,17.2928932 L16.2928932,18.7071068 L9.58578644,12 L16.2928932,5.29289322 L17.7071068,6.70710678 L12.4142136,12 Z\"></path></svg>'\r\n\r\n        className.push('quick-prev')\r\n\r\n        // 动态创建 快速到上一组图标 按钮\r\n        $child = html(`<i class=\"pagination__icon\">${iconMore}${iconPrev}</i>`)\r\n      } else if (isQuickNextVisible) {\r\n        // 快速到下一组图标\r\n        let iconNext =\r\n          '<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"pagination__svg svg-quick-next\"><path fill-rule=\"evenodd\" d=\"M11.2928932,6.70710678 L12.7071068,5.29289322 L19.4142136,12 L12.7071068,18.7071068 L11.2928932,17.2928932 L16.5857864,12 L11.2928932,6.70710678 Z M6.29289322,6.70710678 L7.70710678,5.29289322 L14.4142136,12 L7.70710678,18.7071068 L6.29289322,17.2928932 L11.5857864,12 L6.29289322,6.70710678 Z\"></path></svg>'\r\n\r\n        className.push('quick-next')\r\n\r\n        // 动态创建 快速到下一组图标 按钮\r\n        $child = html(`<i class=\"pagination__icon\">${iconMore}${iconNext}</i>`)\r\n      }\r\n    } else {\r\n      $child = text(value.toString())\r\n    }\r\n\r\n    $children.push($child)\r\n\r\n    // 动态创建完整的数字导航按钮\r\n    return createElement(\r\n      'li',\r\n      {\r\n        className: className.join(' '),\r\n        'data-page': value\r\n      },\r\n      $children\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 用来动态生成所有的数字分页导航按钮\r\n   * ========================================================================\r\n   * @method _createPages\r\n   * @returns {HTMLElement|null}\r\n   * @private\r\n   */\r\n  _createPages() {\r\n    const pages = this.pages()\r\n    const page = this.page()\r\n    const limit = this.limit()\r\n    const range = this.range()\r\n    const disabled = this.disabled()\r\n    const theme = this.attr('theme')\r\n    const isQuickPrevVisible = this.isQuickPrevVisible()\r\n    const isQuickNextVisible = this.isQuickNextVisible()\r\n    const $fragment = document.createDocumentFragment()\r\n\r\n    // 绘制第1页\r\n    if (pages > 0) {\r\n      $fragment.appendChild(this._createPager(1, page))\r\n    } else {\r\n      return null\r\n    }\r\n\r\n    // 绘制快速到上一组按钮\r\n    if (isQuickPrevVisible) {\r\n      let prevPage = page - (limit - 2)\r\n\r\n      prevPage = prevPage >= 1 ? prevPage : 1\r\n\r\n      $fragment.appendChild(\r\n        this._createPager(prevPage, page, { isQuickPrevVisible })\r\n      )\r\n    }\r\n\r\n    // 绘制当前页面可以显示的数字按钮\r\n    if (range.length > 0) {\r\n      range.forEach((value, i) => {\r\n        if (i <= range.length - 1) {\r\n          $fragment.appendChild(this._createPager(value, page))\r\n        }\r\n      })\r\n    }\r\n\r\n    // 绘制快速到下一组按钮\r\n    if (isQuickNextVisible) {\r\n      let nextPage = page + (limit - 2)\r\n\r\n      nextPage = nextPage <= pages ? nextPage : pages\r\n\r\n      $fragment.appendChild(\r\n        this._createPager(nextPage, page, { isQuickNextVisible })\r\n      )\r\n    }\r\n\r\n    // 绘制最后1页\r\n    if (pages > 1) {\r\n      $fragment.appendChild(this._createPager(pages, page))\r\n    }\r\n\r\n    // 动态创建数字按钮的导航列表\r\n    const $pages = createElement(\r\n      'ul',\r\n      {\r\n        className: `pagination__list theme-${theme}`\r\n      },\r\n      [$fragment]\r\n    )\r\n\r\n    // 设置禁用样式\r\n    if (disabled) {\r\n      addClass($pages, 'is-disabled')\r\n    }\r\n\r\n    return $pages\r\n  }\r\n\r\n  /**\r\n   * 向上翻1页\r\n   * ========================================================================\r\n   * @method prev\r\n   * @returns {Pagination}\r\n   */\r\n  prev() {\r\n    const disabled = this.disabled()\r\n    let page = this.page()\r\n\r\n    if (disabled) {\r\n      return this\r\n    }\r\n\r\n    page -= 1\r\n\r\n    if (page <= 1) {\r\n      page = 1\r\n    }\r\n\r\n    this.change(page)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向上翻1页\r\n   * ========================================================================\r\n   * @method prev\r\n   * @returns {Pagination}\r\n   */\r\n  next() {\r\n    const disabled = this.disabled()\r\n    const pages = this.pages()\r\n    let page = this.page()\r\n\r\n    if (disabled) {\r\n      return this\r\n    }\r\n\r\n    page += 1\r\n\r\n    if (page >= pages) {\r\n      page = pages\r\n    }\r\n\r\n    this.change(page)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 翻到第几页\r\n   * ========================================================================\r\n   * @method change\r\n   * @param {Number} page - 要跳转的页面数值\r\n   * @returns {Pagination}\r\n   */\r\n  change(page) {\r\n    const pages = this.pages()\r\n    const disabled = this.disabled()\r\n    let current = isNumber(page) ? page : this.page()\r\n\r\n    if (disabled) {\r\n      return this\r\n    }\r\n\r\n    if (current <= 1) {\r\n      current = 1\r\n    } else if (current >= pages) {\r\n      current = pages\r\n    }\r\n\r\n    // 添加 change 事件\r\n    this.$emit('change', current)\r\n\r\n    this.page(current)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制分页导航的 UI 界面\r\n   * ========================================================================\r\n   * @method render\r\n   * @returns {Pagination}\r\n   */\r\n  render() {\r\n    const $parent = this.parent()\r\n\r\n    if (!$parent) {\r\n      return this\r\n    }\r\n\r\n    const align = this.attr('align')\r\n    const theme = this.attr('theme')\r\n    const customClass = this.attr('customClass')\r\n    const $fragment = document.createDocumentFragment()\r\n\r\n    if (this.hasPrev()) {\r\n      $fragment.appendChild(this._createPrev())\r\n    }\r\n\r\n    if (this.hasPager()) {\r\n      $fragment.appendChild(this._createPages())\r\n    }\r\n\r\n    if (this.hasNext()) {\r\n      $fragment.appendChild(this._createNext())\r\n    }\r\n\r\n    // 绘制完整分页组件\r\n    const $el = createElement(\r\n      'div',\r\n      {\r\n        className: `pagination theme-${theme} align_${align}`\r\n      },\r\n      [$fragment]\r\n    )\r\n\r\n    // 设置自定义样式\r\n    if (customClass) {\r\n      addClass($el, customClass)\r\n    }\r\n\r\n    // 设置禁用样式\r\n    if (this.disabled()) {\r\n      addClass($el, 'is-disabled')\r\n    }\r\n\r\n    this.$el = $el\r\n\r\n    // 绘制完成\r\n    $parent.appendChild($el)\r\n\r\n    // 添加 mounted 事件\r\n    this.$emit('mounted')\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * （切换页面后）刷新分页导航的 UI 界面\r\n   * ========================================================================\r\n   * @method refresh\r\n   * @returns {Pagination}\r\n   */\r\n  refresh() {\r\n    const $el = this.$el\r\n    const $prev = getEl('.pagination__prev', $el)\r\n    const $pages = getEl('.pagination__list', $el)\r\n    const $next = getEl('.pagination__next', $el)\r\n    const page = this.page()\r\n    const pages = this.pages()\r\n\r\n    if (pages < 1) {\r\n      return this\r\n    }\r\n\r\n    // 更新上一页按钮界面\r\n    if (this.hasPrev()) {\r\n      if (page === 1) {\r\n        addClass($prev, 'is-disabled')\r\n      } else {\r\n        removeClass($prev, 'is-disabled')\r\n      }\r\n    } else {\r\n      if ($prev) {\r\n        $el.removeChild($prev)\r\n      }\r\n    }\r\n\r\n    // 更新数字按钮导航列表界面\r\n    if (this.hasPager()) {\r\n      $el.replaceChild(this._createPages(), $pages)\r\n    }\r\n\r\n    // 更新下一页按钮界面\r\n    if (this.hasNext() && pages > 1) {\r\n      if (page === pages) {\r\n        addClass($next, 'is-disabled')\r\n      } else {\r\n        removeClass($next, 'is-disabled')\r\n      }\r\n    } else {\r\n      if ($next) {\r\n        $el.removeChild($next)\r\n      }\r\n    }\r\n\r\n    // 添加 refresh 事件\r\n    this.$emit('refresh')\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 销毁界面并移除导航按钮绑定的事件处理器\r\n   * ========================================================================\r\n   * @method destroy\r\n   * @returns {Pagination}\r\n   */\r\n  destroy() {\r\n    const $parent = this.parent()\r\n\r\n    this.removeListeners()\r\n\r\n    if ($parent) {\r\n      $parent.removeChild(this.$el)\r\n    }\r\n\r\n    this._default()\r\n\r\n    // 添加 destroy 事件\r\n    this.$emit('destroy')\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 整体重置分页导航界面\r\n   * ========================================================================\r\n   * @method reload\r\n   * @param {Object} [options] - 可选，分页组件的初始化配置信息。如果不传递 options 参数，则使用之前的配置或者默认配置\r\n   * @param {String|HTMLElement} options.parent - 必须，显分页导航的父节点或者节点选择器\r\n   * @param {Number} options.total - 必须，数据总数量\r\n   * @param {Number} [options.size=20] - 可选，每页显示的数量，默认值：20\r\n   * @param {Number} [options.page=1] - 可选，当前页面，默认值：1\r\n   * @param {Number} [options.limit=7] - 可选，页面导航数字按钮的个数，默认值：7\r\n   * @param {String} [options.theme='default'] - 可选，主题：default（默认值）、plain 和 bordered\r\n   * @param {String} [options.align='justify'] - 可选，导航的对齐方式：justify（默认值）、left 和 right\r\n   * @param {Array} [options.layout=['prev','pager','next']] - 可选，导航显示的组件，默认值：['prev','pager','next']\r\n   * @param {String} [options.prevText=''] - 可选，上一页按钮的显示文本。如果配置文字，就用文字按钮显示，否认使用图标按钮\r\n   * @param {String} [options.nextText=''] - 可选，下一页按钮的显示文本。如果配置文字，就用文字按钮显示，否认使用图标按钮\r\n   * @param {Boolean} [options.prevIcon=true] - 可选，是否用图标按钮显示上一页按钮，默认值：true\r\n   * @param {Boolean} [options.nextIcon=true] - 可选，是否用图标按钮显示下一页按钮，默认值：true\r\n   * @param {Boolean} [options.disabled=false] - 可选，分页导航是否禁用，默认值：false\r\n   * @param {String} [options.customClass=''] - 可选，用于扩展的自定义导航样式，默认值：''\r\n   * @returns {Pagination}\r\n   */\r\n  reload(options) {\r\n    let attrs = cloneDeep(this.attr())\r\n\r\n    this.destroy()\r\n\r\n    if (options) {\r\n      this.attr(options)\r\n      attrs = this.attr()\r\n    }\r\n\r\n    this.initialize(attrs)\r\n\r\n    // 添加 reload 事件\r\n    this.$emit('reload')\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * （消息订阅发布模式）发布消息\r\n   * ========================================================================\r\n   * @method $emit\r\n   * @param {String} topic - 必须，发布消息的主题名称\r\n   * @param {*} [data] - 可选，发布消息时传递的数据\r\n   * @returns {Pagination}\r\n   */\r\n  $emit(topic, data) {\r\n    publish(topic, data)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * （消息订阅发布模式）订阅消息，并指定接受到消息后的回调处理函数\r\n   * ========================================================================\r\n   * @method $on\r\n   * @param {String} topic - 必须，订阅消息的主题名称\r\n   * @param {Function} callback - 必须，接受到消息后的回调处理函数\r\n   * @returns {Pagination}\r\n   */\r\n  $on(topic, callback) {\r\n    subscribe(topic, callback, this)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * （消息订阅发布模式）取消订阅消息\r\n   * ========================================================================\r\n   * @method $off\r\n   * @param {String} topic - 必须，订阅消息的主题名称\r\n   * @returns {Pagination}\r\n   */\r\n  $off(topic) {\r\n    unsubscribe(topic)\r\n    return this\r\n  }\r\n\r\n  _onPrev(evt) {\r\n    const $prev = evt.delegateTarget\r\n\r\n    if (hasClass($prev, 'is-disabled')) {\r\n      return this\r\n    }\r\n\r\n    stop(evt)\r\n    this.prev()\r\n\r\n    return this\r\n  }\r\n\r\n  _onChange(evt) {\r\n    const $pager = evt.delegateTarget\r\n    const page = Number(getAttribute($pager, 'data-page'))\r\n\r\n    if (hasClass($pager, 'is-disabled') || hasClass($pager, 'is-active')) {\r\n      return this\r\n    }\r\n\r\n    stop(evt)\r\n    this.change(page)\r\n\r\n    return this\r\n  }\r\n\r\n  _onNext(evt) {\r\n    const $next = evt.delegateTarget\r\n\r\n    if (hasClass($next, 'is-disabled')) {\r\n      return this\r\n    }\r\n\r\n    stop(evt)\r\n    this.next()\r\n\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    const $el = this.$el\r\n\r\n    if (this.hasPrev()) {\r\n      on($el, '.pagination__prev', 'click', this._onPrev, this, true)\r\n    }\r\n\r\n    if (this.hasPager()) {\r\n      on($el, '.pagination__pager', 'click', this._onChange, this, true)\r\n    }\r\n\r\n    if (this.hasNext()) {\r\n      on($el, '.pagination__next', 'click', this._onNext, this, true)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    const $el = this.$el\r\n\r\n    if (this.hasPrev()) {\r\n      off($el, 'click', this._onPrev)\r\n    }\r\n\r\n    if (this.hasPager()) {\r\n      off($el, 'click', this._onChange)\r\n    }\r\n\r\n    if (this.hasNext()) {\r\n      off($el, 'click', this._onNext)\r\n    }\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nPagination.DEFAULTS = (() => {\r\n  const OPTIONS = {\r\n    parent: '#pagination',\r\n    total: 0,\r\n    size: 20,\r\n    page: 1,\r\n    limit: 7,\r\n    theme: 'default',\r\n    align: 'justify',\r\n    layout: ['prev', 'pager', 'next'],\r\n    prevText: false,\r\n    nextText: false,\r\n    disabled: false,\r\n    customClass: ''\r\n  }\r\n\r\n  return cloneDeep(OPTIONS)\r\n})()\r\n\r\nexport default Pagination\r\n","import hasOwn from '@/utils/lang/hasOwn'\r\n\r\n/**\r\n * 扩展对象\r\n * ========================================================================\r\n * @method extend\r\n * @param {Object} origin\r\n * @param {Object} source\r\n */\r\nconst extend = (origin, source) => {\r\n  const keys = Object.keys(source)\r\n\r\n  keys.forEach((prop) => {\r\n    if (hasOwn(source, prop)) {\r\n      origin[prop] = source[prop]\r\n    }\r\n  })\r\n}\r\n\r\nexport default extend\r\n","// 所有的订阅者信息\r\nimport observers from '@/utils/observer/observers'\r\n\r\n/**\r\n * 发布主题信息\r\n * ==========================================================\r\n * @method publish\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} data - （必须）需要传递给订阅者的数据\r\n */\r\nconst publish = (topic, data) => {\r\n  // 获取 topic 对应的订阅者信息\r\n  const observer = observers[topic]\r\n\r\n  // 没有找到主题，或者主题没有任何订阅者信息，则不执行\r\n  if (!observer || observer.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 一个 topic 会有多个订阅者订阅，\r\n  // 所以需要遍历执行所有的订阅者信息。\r\n  observer.forEach((subscription) => {\r\n    return subscription.handler.call(subscription.context || subscription, data)\r\n  })\r\n}\r\n\r\nexport default publish\r\n","import isFunction from '@/utils/types/isFunction'\r\nimport guid from '@/utils/lang/guid'\r\nimport observers from '@/utils/observer/observers'\r\n\r\n/**\r\n * 订阅主题，并给出处理器函数\r\n * ==========================================================\r\n * @method subscribe\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Function} handler - （必须）主题的处理器函数\r\n * @param {Object} [context] - （可选）指定 this 执行上下文\r\n * @return {String|Boolean} - 唯一的 token 字符串，例如：'guid-1'。\r\n */\r\nconst subscribe = (topic, handler, context) => {\r\n  const token = guid()\r\n\r\n  // handler 不是函数类型则不执行\r\n  if (!isFunction(handler)) {\r\n    return false\r\n  }\r\n\r\n  // 如果还没有 topic 主题，则创建一个 topic 主题\r\n  if (!observers[topic]) {\r\n    observers[topic] = []\r\n  }\r\n\r\n  // 往 topic 主题添加订阅信息\r\n  observers[topic].push({\r\n    handler,\r\n    token,\r\n    context\r\n  })\r\n\r\n  return token\r\n}\r\n\r\nexport default subscribe\r\n","import isHTMLElement from '@/utils/types/isHTMLElement'\r\nimport isString from '@/utils/types/isString'\r\nimport { FROM_ELEMENT_TAGS } from '@/utils/dom/enum'\r\n\r\n/**\r\n * 获取 DOM 元素的某个 HTML 属性的值\r\n * ========================================================================\r\n * @method getAttribute\r\n * @param {HTMLElement} el\r\n * @param {String} attr\r\n * @return {String|Boolean}\r\n */\r\nconst getAttribute = (el, attr) => {\r\n  let tagName\r\n\r\n  if (!isHTMLElement(el) || !isString(attr)) {\r\n    return false\r\n  }\r\n\r\n  tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'className':\r\n      return el.getAttribute('class')\r\n    case 'htmlFor':\r\n      return el.getAttribute('for')\r\n    case 'style':\r\n      return el.style.cssText\r\n    case 'value':\r\n      if (FROM_ELEMENT_TAGS.indexOf(tagName) > -1) {\r\n        return el.value\r\n      } else {\r\n        return el.getAttribute(attr)\r\n      }\r\n    default:\r\n      return el.getAttribute(attr)\r\n  }\r\n}\r\n\r\nexport default getAttribute\r\n"],"names":["toString","val","Object","prototype","apply","isFunction","fn","isObject","o","isArray","Array","cloneDeep","obj","clone","from","assign","keys","forEach","key","hasOwn","prop","hasOwnProperty","call","isBoolean","isString","str","isNumber","isHTMLElement","nodeName","tagName","nodeType","hasClass","el","className","pattern","allClass","classList","RegExp","contains","exec","addClass","add","length","trim","replace","removeClass","remove","getEl","selector","multiple","$el","document","isMultiple","querySelectorAll","querySelector","FROM_ELEMENT_TAGS","isDOM","isHTMLCollection","fragment","isText","setAttributes","attrs","attr","value","toLowerCase","setAttribute","style","cssText","indexOf","innerText","innerHTML","text","createTextNode","textContent","createElement","children","$fragment","createDocumentFragment","isValidChild","child","append","$child","appendChild","every","TAGS","isHTML","html","basic","full","slice","map","tag","join","test","stripScripts","strHTML","template","childNodes","observers","guid","id","prefix","unsubscribe","topic","token","observer","has","filter","subscription","matches","sel","msMatchesSelector","getParentOrHost","host","parentNode","CAPTURE_EVENTS","_off","type","capture","_delegateListener","listeners","_listeners","index","listener","i","handler","splice","_delete","removeEventListener","purge","recurse","$element","$children","getListeners","arguments","off","on","data","context","once","evt","target","getTarget","delegateTarget","ctx","includeCTX","startsWith","closest","overrideContext","push","addEventListener","stop","stopPropagation","preventDefault","Pagination","constructor","options","this","initialize","_default","DEFAULTS","$emit","render","addListeners","origin","source","total","refresh","page","size","limit","theme","includes","align","pages","Math","ceil","disabled","range","isQuickNextVisible","len","isQuickPrevVisible","parent","hasPrev","hasPager","hasNext","_createPrev","prevText","prevClassName","prevChildren","iconPrev","$prev","_createNext","nextText","nextClassName","nextChildren","iconNext","$next","_createPager","current","isActive","iconMore","name","_createPages","prevPage","nextPage","$pages","prev","change","next","$parent","customClass","removeChild","replaceChild","destroy","removeListeners","reload","publish","$on","callback","subscribe","$off","_onPrev","_onChange","$pager","Number","getAttribute","_onNext","layout"],"mappings":"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AAYN,EACf,MACF,IAAK,YACH/B,EAAGsC,UAAYP,EACf,MACF,QACE/B,EAAGiC,aAAaH,EAAMC,GAEzB,EDxBGE,CAAajC,EAAI8B,EAAMC,EACxB,GACD,EEZEQ,EAAO,CAACvC,EAAIP,OACXO,IAAQR,EAASQ,KAAQL,EAAcK,MAIxCR,EAASQ,GACJmB,SAASqB,eAAexC,GACtBR,EAASC,QAClBO,EAAGyC,YAAchD,GAEVO,EAAGyC,aCNRC,EAAgB,CAAC7C,EAASgC,EAAOc,KACrC,MAAMC,EAAYzB,SAAS0B,yBAE3B,IAAKhD,EACH,OAAO,KAGT,MAAMqB,EAAMC,SAASuB,cAAc7C,GAC7BiD,EAAgBC,GACbvB,EAAMuB,IAAUvD,EAASuD,GAE5BC,EAAUD,IACd,IAAIE,EAEJ,IAAKH,EAAaC,GAChB,OAAO,EAIPE,EADEzB,EAAMuB,GACCA,EAEAR,EAAKQ,GAGhBH,EAAUM,YAAYD,EAAO,EAyB/B,OAtBIzD,EAASqC,GACXmB,EAAOT,EAAKV,IACHL,EAAMK,GACfmB,EAAOnB,GACEpD,EAAQoD,IAAUA,EAAMsB,OAAOrB,GAASgB,EAAahB,KAC9DD,EAAM5C,SAAS8D,IACbC,EAAOD,EAAM,IAENxE,EAASsD,KAAWL,EAAMK,IACnCD,EAAcV,EAAKW,GAGjBpD,EAAQkE,GACVA,EAAS1D,SAAS8D,IAChBC,EAAOD,EAAM,IAGfC,EAAOL,GAGTzB,EAAIgC,YAAYN,GAET1B,GChEHkC,EAAO,CACX,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,S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"}